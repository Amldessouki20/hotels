generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// PERMISSIONS SYSTEM
// ================================
model Permission {
  id          String   @id @default(cuid())
  module      String
  action      String
  description String?

  groupPermissions GroupPermission[]
  userPermissions  UserPermission[]

  @@unique([module, action])
  @@index([module])
  @@index([action])
  @@map("permissions")
}

// ================================
// USER GROUPS & USERS
// ================================
model UserGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users            User[]
  groupPermissions GroupPermission[]

  @@map("user_groups")
}

model User {
  id                   String     @id @default(cuid())
  username             String     @unique
  email                String?    @unique
  password             String
  fullName             String?
  phone                String?

  groupId              String
  group                UserGroup  @relation(fields: [groupId], references: [id], onDelete: Restrict)

  isActive             Boolean    @default(true)
  passwordExpired      Boolean    @default(false)
  passwordNeverExpires Boolean    @default(false)

  createdAt            DateTime   @default(now())
  lastPasswordChange   DateTime?

  // --- إضافات للموظفين ---
  salary          Decimal? @db.Decimal(10, 2) // الراتب الشهري
  maxDiscountRate Int?     // نسبة الخصم المسموح بها

  userPermissions  UserPermission[]
  createdBookings  Booking[]        @relation("BookingCreatedBy")
  updatedBookings  Booking[]        @relation("BookingUpdatedBy")
  createdHotels    Hotel[]          @relation("HotelCreatedBy")
  createdRooms     Room[]           @relation("RoomCreatedBy")
  savedFilters     SavedFilter[]
  auditLogs        AuditLog[]

  @@index([groupId])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

// ================================
// PERMISSION RELATIONS
// ================================
model GroupPermission {
  id            String      @id @default(cuid())
  groupId       String
  permissionId  String
  isAllowed     Boolean     @default(true)

  group         UserGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([groupId, permissionId])
  @@map("group_permissions")
}

model UserPermission {
  id            String      @id @default(cuid())
  userId        String
  permissionId  String
  isAllowed     Boolean     @default(true)

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// ================================
// COMPANY MANAGEMENT
// ================================
model Company {
  id     String  @id @default(cuid())
  name   String  @unique
  hotels Hotel[]
}

// ================================
// HOTEL MANAGEMENT
// ================================
model Hotel {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  address     String?
  location    String?
  phone       String?
  email       String?
  website     String?
  rating      Int?     @db.SmallInt
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])

  createdBy  User            @relation("HotelCreatedBy", fields: [createdById], references: [id])
  amenities  HotelAmenity[]
  rooms      Room[]
  bookings   Booking[]
  agreements HotelAgreement[]

  @@index([isActive])
  @@index([location])
  @@index([rating])
  @@index([createdAt])
  @@index([createdById])
  @@map("hotels")
}

model HotelAmenity {
  id      String @id @default(cuid())
  hotelId String
  name    String
  icon    String?

  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([hotelId, name])
  @@map("hotel_amenities")
}

model HotelAgreement {
  id         String   @id @default(cuid())
  hotelId    String
  fileName   String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("hotel_agreements")
}

// ================================
// ROOM MANAGEMENT
// ================================
model Room {
  id                  String     @id @default(cuid())
  hotelId             String
  roomType            String
  roomTypeDescription String
  altDescription      String?
  purchasePrice       Decimal    @db.Decimal(10, 2)
  basePrice           Decimal    @db.Decimal(10, 2)
  discountPrice       Decimal?   @db.Decimal(10, 2)
  quantity            Int        @default(1)
  boardType           BoardType  @default(ROOM_ONLY)
  size                String?
  capacity            Int        @default(2)
  floor               Int?
  bedType             String?
  hasBalcony          Boolean    @default(false)
  hasSeaView          Boolean    @default(false)
  smokingAllowed      Boolean    @default(false)
  isActive            Boolean    @default(true)

  status              RoomStatus @default(AVAILABLE) // --- حالة الغرفة ---

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  createdById         String

  hotel             Hotel              @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdBy         User               @relation("RoomCreatedBy", fields: [createdById], references: [id])
  bookings          Booking[]
  seasonalPrices    SeasonalPrice[]
  roomAmenities     RoomAmenity[]
  availabilitySlots AvailabilitySlot[]
  files             RoomFile[]         // --- ملفات الغرف ---

  @@index([hotelId])
  @@index([roomType])
  @@index([isActive])
  @@index([capacity])
  @@index([basePrice])
  @@index([boardType])
  @@index([createdAt])
  @@map("rooms")
}

enum BoardType {
  ROOM_ONLY
  BED_BREAKFAST
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  FULLY_PAID
  PARTIALLY_PAID
  BLOCKED
}

model RoomAmenity {
  id     String @id @default(cuid())
  roomId String
  name   String
  icon   String?

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, name])
  @@map("room_amenities")
}

model RoomFile {
  id        String   @id @default(cuid())
  roomId    String
  fileName  String
  filePath  String
  fileSize  Int
  mimeType  String
  uploadedAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_files")
}

model SeasonalPrice {
  id        String   @id @default(cuid())
  roomId    String
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  price     Decimal  @db.Decimal(10, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@index([startDate, endDate])
  @@map("seasonal_prices")
}

model AvailabilitySlot {
  id             String   @id @default(cuid())
  roomId         String
  date           DateTime @db.Date
  availableCount Int
  blockedCount   Int      @default(0)
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date])
  @@index([roomId])
  @@index([date])
  @@index([availableCount])
  @@map("availability_slots")
}

// ================================
// GUEST MANAGEMENT
// ================================
model Guest {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  fullName      String
  email         String?
  phone         String?
  nationality   String?
  dateOfBirth   DateTime? @db.Date
  passportNo    String?
  idNumber      String?
  address       String?
  notes         String?
  isVip         Boolean   @default(false)
  isBlacklisted Boolean   @default(false)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bookings Booking[]

  @@index([fullName])
  @@index([email])
  @@index([phone])
  @@index([nationality])
  @@index([isVip])
  @@index([isBlacklisted])
  @@index([createdAt])
  @@map("guests")
}

// ================================
// BOOKING MANAGEMENT
// ================================
model Booking {
  id              String        @id @default(cuid())
  resId           String        @unique
  hotelId         String
  roomId          String
  guestId         String
  numberOfRooms   Int           @default(1)
  numberOfAdults  Int           @default(2)
  numberOfChildren Int          @default(0)
  checkInDate     DateTime      @db.Date
  checkOutDate    DateTime      @db.Date
  numberOfNights  Int
  roomRate        Decimal       @db.Decimal(10, 2)
  discountRate    Decimal?      @db.Decimal(10, 2)
  taxAmount       Decimal?      @db.Decimal(10, 2)
  totalAmount     Decimal       @db.Decimal(12, 2)
  paidAmount      Decimal       @default(0) @db.Decimal(12, 2)
  remainingAmount Decimal       @default(0) @db.Decimal(12, 2)
  status          BookingStatus @default(PENDING)
  specialRequests String?
  notes           String?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdById     String
  updatedById     String?

  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
  guest     Guest    @relation(fields: [guestId], references: [id])
  createdBy User     @relation("BookingCreatedBy", fields: [createdById], references: [id])
  updatedBy User?    @relation("BookingUpdatedBy", fields: [updatedById], references: [id])
  payments  Payment[]

  @@index([hotelId])
  @@index([roomId])
  @@index([guestId])
  @@index([status])
  @@index([checkInDate])
  @@index([checkOutDate])
  @@index([createdAt])
  @@index([createdById])
  @@index([checkInDate, checkOutDate])
  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

// ================================
// PAYMENTS
// ================================
model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  method          PaymentMethod
  totalAmount     Decimal       @db.Decimal(12, 2)
  paidAmount      Decimal       @db.Decimal(12, 2)
  remainingAmount Decimal       @db.Decimal(12, 2)
  paymentDate     DateTime      @db.Date
  status          PaymentStatus @default(PENDING)
  reference       String?
  notes           String?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([status])
  @@index([method])
  @@index([paymentDate])
  @@index([createdAt])
  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CHECK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  PARTIALLY_PAID
  FAILED
  REFUNDED
}

// ================================
// SAVED FILTERS SYSTEM
// ================================
model SavedFilter {
  id          String   @id @default(cuid())
  name        String
  description String?
  filterType  String
  filters     Json
  isPublic    Boolean  @default(false)
  isDefault   Boolean  @default(false)

  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdById])
  @@index([filterType])
  @@index([isPublic])
  @@index([isDefault])
  @@map("saved_filters")
}

// ================================
// AUDIT LOGS
// ================================
model AuditLog {
  id        String   @id @default(cuid())
  tableName String
  recordId  String
  action    String
  oldValues Json?
  newValues Json?
  userId    String?
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?

  user User? @relation(fields: [userId], references: [id])

  @@index([tableName])
  @@index([recordId])
  @@index([action])
  @@index([userId])
  @@index([timestamp])
  @@index([tableName, recordId])
  @@map("audit_logs")
}
