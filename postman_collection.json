{
  "info": {
    "name": "Soufian Booking App API Tests",
    "description": "Complete API testing collection for authentication, permissions, groups, and users management",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "group_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "permission_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login to get authentication token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.token).to.not.be.empty;",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', function () {",
                  "        pm.expect.fail('Login request failed');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout and invalidate token"
          }
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "me"]
            },
            "description": "Get current authenticated user info"
          }
        }
      ]
    },
    {
      "name": "Permissions Management",
      "item": [
        {
          "name": "Get All Permissions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/permissions",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "permissions"]
            },
            "description": "Retrieve all system permissions"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.permissions && response.permissions.length > 0) {",
                  "        pm.collectionVariables.set('permission_id', response.permissions[0].id);",
                  "    }",
                  "    pm.test('Permissions retrieved successfully', function () {",
                  "        pm.expect(response.permissions).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Permission",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"module\": \"test\",\n  \"action\": \"create\",\n  \"description\": \"Test permission for API testing\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/permissions",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "permissions"]
            },
            "description": "Create a new permission"
          }
        },
        {
          "name": "Update Permission",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"module\": \"test\",\n  \"action\": \"update\",\n  \"description\": \"Updated test permission\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/permissions/{{permission_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "permissions", "{{permission_id}}"]
            },
            "description": "Update an existing permission"
          }
        },
        {
          "name": "Delete Permission",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/permissions/{{permission_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "permissions", "{{permission_id}}"]
            },
            "description": "Delete a permission"
          }
        }
      ]
    },
    {
      "name": "Groups Management",
      "item": [
        {
          "name": "Get All Groups",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/groups",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "groups"]
            },
            "description": "Retrieve all user groups"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.groups && response.groups.length > 0) {",
                  "        pm.collectionVariables.set('group_id', response.groups[0].id);",
                  "    }",
                  "    pm.test('Groups retrieved successfully', function () {",
                  "        pm.expect(response.groups).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Group",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Group\",\n  \"description\": \"Group created for API testing\",\n  \"permissions\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/groups",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "groups"]
            },
            "description": "Create a new user group"
          }
        },
        {
          "name": "Get Group by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/groups/{{group_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "groups", "{{group_id}}"]
            },
            "description": "Get specific group details"
          }
        },
        {
          "name": "Update Group",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Group\",\n  \"description\": \"Updated group description\",\n  \"permissions\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/groups/{{group_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "groups", "{{group_id}}"]
            },
            "description": "Update an existing group"
          }
        },
        {
          "name": "Delete Group",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/groups/{{group_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "groups", "{{group_id}}"]
            },
            "description": "Delete a group"
          }
        }
      ]
    },
    {
      "name": "Users Management",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/users?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Retrieve all users with pagination"
          }
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"fullName\": \"Test User\",\n  \"phone\": \"+1234567890\",\n  \"groupId\": \"{{group_id}}\",\n  \"isActive\": true,\n  \"salary\": 5000.00,\n  \"maxDiscountRate\": 10.5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users"]
            },
            "description": "Create a new user"
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users", "{{user_id}}"]
            },
            "description": "Get specific user details"
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"Updated Test User\",\n  \"phone\": \"+9876543210\",\n  \"isActive\": true,\n  \"salary\": 6000.00,\n  \"maxDiscountRate\": 15.0\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users", "{{user_id}}"]
            },
            "description": "Update an existing user"
          }
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users", "{{user_id}}"]
            },
            "description": "Delete a user"
          }
        },
        {
          "name": "Export Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/users/export?format=json&includePermissions=true&includeStats=true",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users", "export"],
              "query": [
                {
                  "key": "format",
                  "value": "json"
                },
                {
                  "key": "includePermissions",
                  "value": "true"
                },
                {
                  "key": "includeStats",
                  "value": "true"
                }
              ]
            },
            "description": "Export users data with permissions and statistics"
          }
        },
        {
          "name": "Assign Permission to User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"permissionId\": \"{{permission_id}}\",\n  \"isAllowed\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{user_id}}/permissions",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users", "{{user_id}}", "permissions"]
            },
            "description": "Assign a permission to a user"
          }
        },
        {
          "name": "Remove Permission from User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{user_id}}/permissions/{{permission_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users", "{{user_id}}", "permissions", "{{permission_id}}"]
            },
            "description": "Remove a permission from a user"
          }
        }
      ]
    },
    {
      "name": "System Health",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": ["{{base_url}}"],
              "path": ["api", "health"]
            },
            "description": "Check system health and database connectivity"
          }
        },
        {
          "name": "Database Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/system/database",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "system", "database"]
            },
            "description": "Check database connection and status"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    try {",
          "        pm.response.json();",
          "        pm.expect(true).to.be.true;",
          "    } catch (e) {",
          "        pm.expect.fail('Response is not valid JSON');",
          "    }",
          "});"
        ]
      }
    }
  ]
}